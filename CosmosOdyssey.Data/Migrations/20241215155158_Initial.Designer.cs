// <auto-generated />
using System;
using CosmosOdyssey.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CosmosOdyssey.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241215155158_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CosmosOdyssey.Domain.Features.PriceLists.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("CosmosOdyssey.Domain.Features.PriceLists.LegProvider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("FlightEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("FlightStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<Guid>("PriceListId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PriceListLegId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("PriceListLegId");

                    b.ToTable("LegProvider");
                });

            modelBuilder.Entity("CosmosOdyssey.Domain.Features.PriceLists.LegRoute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision");

                    b.Property<Guid>("PriceListId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PriceListLegId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PriceListLegId");

                    b.ToTable("LegRoute");
                });

            modelBuilder.Entity("CosmosOdyssey.Domain.Features.PriceLists.PriceList", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("ValidUntil")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("PriceLists", (string)null);
                });

            modelBuilder.Entity("CosmosOdyssey.Domain.Features.PriceLists.PriceListLeg", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PriceListId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PriceListId");

                    b.ToTable("PriceListLeg");
                });

            modelBuilder.Entity("CosmosOdyssey.Domain.Features.PriceLists.LegProvider", b =>
                {
                    b.HasOne("CosmosOdyssey.Domain.Features.PriceLists.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CosmosOdyssey.Domain.Features.PriceLists.PriceListLeg", null)
                        .WithMany("Providers")
                        .HasForeignKey("PriceListLegId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("CosmosOdyssey.Domain.Features.PriceLists.LegRoute", b =>
                {
                    b.HasOne("CosmosOdyssey.Domain.Features.PriceLists.PriceListLeg", null)
                        .WithMany("Routes")
                        .HasForeignKey("PriceListLegId");
                });

            modelBuilder.Entity("CosmosOdyssey.Domain.Features.PriceLists.PriceListLeg", b =>
                {
                    b.HasOne("CosmosOdyssey.Domain.Features.PriceLists.PriceList", null)
                        .WithMany("Legs")
                        .HasForeignKey("PriceListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CosmosOdyssey.Domain.Features.PriceLists.PriceList", b =>
                {
                    b.Navigation("Legs");
                });

            modelBuilder.Entity("CosmosOdyssey.Domain.Features.PriceLists.PriceListLeg", b =>
                {
                    b.Navigation("Providers");

                    b.Navigation("Routes");
                });
#pragma warning restore 612, 618
        }
    }
}
